
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactica;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\037\004\000\002\002\004\000\002\037" +
    "\005\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\004\000\002\040\004\000\002\040\003\000" +
    "\002\040\004\000\002\040\003\000\002\036\006\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\004\000\002\015\003\000" +
    "\002\015\004\000\002\015\003\000\002\015\004\000\002" +
    "\015\003\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\004\000\002\015\003" +
    "\000\002\043\004\000\002\043\003\000\002\041\007\000" +
    "\002\041\006\000\002\035\010\000\002\032\014\000\002" +
    "\032\014\000\002\032\014\000\002\033\005\000\002\033" +
    "\004\000\002\034\004\000\002\034\003\000\002\026\011" +
    "\000\002\031\004\000\002\031\003\000\002\027\010\000" +
    "\002\030\003\000\002\030\003\000\002\025\011\000\002" +
    "\021\007\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\013\012\000\002\020\003\000\002" +
    "\020\003\000\002\014\004\000\002\014\003\000\002\014" +
    "\004\000\002\014\003\000\002\014\004\000\002\014\003" +
    "\000\002\012\006\000\002\010\011\000\002\011\005\000" +
    "\002\005\007\000\002\006\003\000\002\006\003\000\002" +
    "\007\005\000\002\017\003\000\002\017\004\000\002\017" +
    "\003\000\002\017\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\004\007\000\002\002\005\000\002\002\005\000\002\002" +
    "\011\000\002\002\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\040\007\011\010\023\011\015\012\004\013" +
    "\022\014\013\015\014\034\017\037\005\040\027\042\020" +
    "\043\033\046\042\047\021\050\036\001\002\000\004\027" +
    "\315\001\002\000\004\027\311\001\002\000\040\002\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\032\uffee\034\uffee\037\uffee\040\uffee\042\uffee\043\uffee" +
    "\045\uffee\001\002\000\040\002\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\032\uffea\034\uffea" +
    "\037\uffea\040\uffea\042\uffea\043\uffea\045\uffea\001\002\000" +
    "\040\002\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\032\ufff4\034\ufff4\037\ufff4\040\ufff4\042" +
    "\ufff4\043\ufff4\045\ufff4\001\002\000\004\034\307\001\002" +
    "\000\034\002\ufffc\007\011\010\023\011\015\012\004\013" +
    "\022\014\013\015\014\034\017\037\005\040\027\042\020" +
    "\043\033\001\002\000\004\027\276\001\002\000\004\027" +
    "\265\001\002\000\004\034\263\001\002\000\012\002\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\001\002\000\004\027\253\001" +
    "\002\000\004\034\233\001\002\000\010\007\201\010\202" +
    "\011\200\001\002\000\004\031\175\001\002\000\004\034" +
    "\166\001\002\000\040\002\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\032\ufff0\034\ufff0\037" +
    "\ufff0\040\ufff0\042\ufff0\043\ufff0\045\ufff0\001\002\000\034" +
    "\002\ufffe\007\011\010\023\011\015\012\004\013\022\014" +
    "\013\015\014\034\017\037\005\040\027\042\020\043\033" +
    "\001\002\000\040\002\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\032\uffe8\034\uffe8\037\uffe8" +
    "\040\uffe8\042\uffe8\043\uffe8\045\uffe8\001\002\000\004\027" +
    "\157\001\002\000\040\002\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\032\uffec\034\uffec\037" +
    "\uffec\040\uffec\042\uffec\043\uffec\045\uffec\001\002\000\040" +
    "\002\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\032\ufff2\034\ufff2\037\ufff2\040\ufff2\042\ufff2" +
    "\043\ufff2\045\ufff2\001\002\000\040\002\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\032\uffe2" +
    "\034\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\001" +
    "\002\000\004\027\100\001\002\000\012\002\ufffd\046\042" +
    "\047\021\050\036\001\002\000\040\002\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\032\uffe6" +
    "\034\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\045\uffe6\001" +
    "\002\000\004\034\061\001\002\000\040\002\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\032" +
    "\uffe4\034\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\045\uffe4" +
    "\001\002\000\004\002\060\001\002\000\012\002\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\001\002\000\004\031\043\001\002" +
    "\000\032\007\011\010\023\011\015\012\004\013\022\014" +
    "\013\015\014\034\017\037\005\040\027\042\020\043\033" +
    "\001\002\000\034\007\011\010\023\011\015\012\004\013" +
    "\022\014\013\015\014\032\050\034\017\037\005\040\027" +
    "\042\020\043\033\001\002\000\040\002\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\032\uffef" +
    "\034\uffef\037\uffef\040\uffef\042\uffef\043\uffef\045\uffef\001" +
    "\002\000\040\002\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\032\uffeb\034\uffeb\037\uffeb\040" +
    "\uffeb\042\uffeb\043\uffeb\045\uffeb\001\002\000\040\002\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\032\ufff5\034\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5" +
    "\045\ufff5\001\002\000\034\002\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\034\ufff6\037\ufff6" +
    "\040\ufff6\042\ufff6\043\ufff6\001\002\000\040\002\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\032\ufff1\034\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\045" +
    "\ufff1\001\002\000\040\002\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\032\uffe9\034\uffe9\037" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\045\uffe9\001\002\000\040" +
    "\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\032\ufff3\034\ufff3\037\ufff3\040\ufff3\042\ufff3" +
    "\043\ufff3\045\ufff3\001\002\000\040\002\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\032\uffed" +
    "\034\uffed\037\uffed\040\uffed\042\uffed\043\uffed\045\uffed\001" +
    "\002\000\040\002\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\032\uffe3\034\uffe3\037\uffe3\040" +
    "\uffe3\042\uffe3\043\uffe3\045\uffe3\001\002\000\040\002\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\032\uffe7\034\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7" +
    "\045\uffe7\001\002\000\040\002\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\032\uffe5\034\uffe5" +
    "\037\uffe5\040\uffe5\042\uffe5\043\uffe5\045\uffe5\001\002\000" +
    "\004\002\000\001\002\000\004\027\062\001\002\000\012" +
    "\007\011\010\023\011\015\030\071\001\002\000\004\031" +
    "\064\001\002\000\032\007\011\010\023\011\015\012\004" +
    "\013\022\014\013\015\014\034\017\037\005\040\027\042" +
    "\020\043\033\001\002\000\034\007\011\010\023\011\015" +
    "\012\004\013\022\014\013\015\014\032\066\034\017\037" +
    "\005\040\027\042\020\043\033\001\002\000\012\002\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\001\002\000\012\007\uffd6\010" +
    "\uffd6\011\uffd6\030\uffd6\001\002\000\012\007\011\010\023" +
    "\011\015\030\073\001\002\000\004\031\uffd8\001\002\000" +
    "\012\007\uffd7\010\uffd7\011\uffd7\030\uffd7\001\002\000\004" +
    "\031\uffd9\001\002\000\012\002\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\001\002\000\034\002\001\007\011\010\023\011\015" +
    "\012\004\013\022\014\013\015\014\034\017\037\005\040" +
    "\027\042\020\043\033\001\002\000\012\002\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\001\002\000\034\002\uffff\007\011\010" +
    "\023\011\015\012\004\013\022\014\013\015\014\034\017" +
    "\037\005\040\027\042\020\043\033\001\002\000\004\034" +
    "\101\001\002\000\004\030\102\001\002\000\004\031\103" +
    "\001\002\000\004\044\104\001\002\000\006\005\111\035" +
    "\113\001\002\000\006\032\107\044\104\001\002\000\006" +
    "\032\uffd3\044\uffd3\001\002\000\040\002\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\032\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\045\uffd5\001" +
    "\002\000\006\032\uffd4\044\uffd4\001\002\000\062\007\126" +
    "\010\142\011\132\012\121\013\141\014\130\015\131\016" +
    "\152\017\125\020\146\021\153\022\145\023\151\024\137" +
    "\025\135\027\124\030\122\031\136\032\134\033\140\034" +
    "\133\035\123\036\150\041\127\001\002\000\004\023\uffd0" +
    "\001\002\000\004\023\uffd1\001\002\000\004\023\115\001" +
    "\002\000\004\031\116\001\002\000\032\007\011\010\023" +
    "\011\015\012\004\013\022\014\013\015\014\034\017\037" +
    "\005\040\027\042\020\043\033\001\002\000\034\007\011" +
    "\010\023\011\015\012\004\013\022\014\013\015\014\032" +
    "\120\034\017\037\005\040\027\042\020\043\033\001\002" +
    "\000\006\032\uffd2\044\uffd2\001\002\000\064\005\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\041\uffac\001\002\000\064\005" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\041\uff9f\001\002\000" +
    "\064\005\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\041\uff94\001" +
    "\002\000\064\005\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\041" +
    "\uffa0\001\002\000\064\005\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\041\uffa7\001\002\000\064\005\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\041\uffaf\001\002\000\064\005\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\041\uff9b\001\002\000\064\005\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa\001\002\000\064" +
    "\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\001\002" +
    "\000\064\005\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\041\uffad" +
    "\001\002\000\064\005\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95" +
    "\041\uff95\001\002\000\064\005\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\027" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\041\uff9d\001\002\000\064\005\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\041\uffa1\001\002\000\064\005\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\041\uff9e\001\002\000\064\005" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\041\uffa2\001\002\000" +
    "\064\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\041\uff9c\001" +
    "\002\000\064\005\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\041" +
    "\uffab\001\002\000\064\005\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\041\uffae\001\002\000\064\005\uffb3\007\126\010\142" +
    "\011\132\012\121\013\141\014\130\015\131\016\152\017" +
    "\125\020\146\021\153\022\145\023\151\024\137\025\135" +
    "\027\124\030\122\031\136\032\134\033\140\034\133\035" +
    "\123\036\150\041\127\001\002\000\004\005\155\001\002" +
    "\000\064\005\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4" +
    "\001\002\000\064\005\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\041\uffa6\001\002\000\064\005\uffb1\007\126\010\142\011" +
    "\132\012\121\013\141\014\130\015\131\016\152\017\125" +
    "\020\146\021\153\022\145\023\151\024\137\025\135\027" +
    "\124\030\122\031\136\032\134\033\140\034\133\035\123" +
    "\036\150\041\127\001\002\000\064\005\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\041\uff93\001\002\000\064\005\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\041\uffa3\001\002\000\064\005" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8\001\002\000" +
    "\064\005\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\041\uffa5\001" +
    "\002\000\004\005\uffb0\001\002\000\010\023\uffb4\030\uffb4" +
    "\033\uffb4\001\002\000\004\005\uffb2\001\002\000\006\005" +
    "\111\034\162\001\002\000\004\030\uffb5\001\002\000\004" +
    "\030\163\001\002\000\004\030\uffb6\001\002\000\004\033" +
    "\164\001\002\000\040\002\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\032\uffb7\034\uffb7\037" +
    "\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7\001\002\000\034" +
    "\002\ufffb\007\011\010\023\011\015\012\004\013\022\014" +
    "\013\015\014\034\017\037\005\040\027\042\020\043\033" +
    "\001\002\000\006\023\170\033\167\001\002\000\042\002" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\030\uff98\032\uff98\034\uff98\037\uff98\040\uff98\042" +
    "\uff98\043\uff98\045\uff98\001\002\000\004\005\171\001\002" +
    "\000\062\007\126\010\142\011\132\012\121\013\141\014" +
    "\130\015\131\016\152\017\125\020\146\021\153\022\145" +
    "\023\151\024\137\025\135\027\124\030\122\031\136\032" +
    "\134\033\140\034\133\035\123\036\150\041\127\001\002" +
    "\000\004\005\173\001\002\000\004\033\174\001\002\000" +
    "\042\002\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\030\uff97\032\uff97\034\uff97\037\uff97\040" +
    "\uff97\042\uff97\043\uff97\045\uff97\001\002\000\032\007\011" +
    "\010\023\011\015\012\004\013\022\014\013\015\014\034" +
    "\017\037\005\040\027\042\020\043\033\001\002\000\034" +
    "\007\011\010\023\011\015\012\004\013\022\014\013\015" +
    "\014\032\177\034\017\037\005\040\027\042\020\043\033" +
    "\001\002\000\040\002\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\032\uffba\034\uffba\037\uffba" +
    "\040\uffba\042\uffba\043\uffba\045\uffba\001\002\000\004\034" +
    "\223\001\002\000\004\034\213\001\002\000\004\034\203" +
    "\001\002\000\004\027\062\001\002\000\004\031\205\001" +
    "\002\000\032\007\011\010\023\011\015\012\004\013\022" +
    "\014\013\015\014\034\017\037\005\040\027\042\020\043" +
    "\033\001\002\000\034\007\011\010\023\011\015\012\004" +
    "\013\022\014\013\015\014\034\017\037\005\040\027\042" +
    "\020\043\033\045\207\001\002\000\010\034\133\035\123" +
    "\036\150\001\002\000\004\033\211\001\002\000\004\032" +
    "\212\001\002\000\012\002\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\001\002\000\004\027\062\001\002\000\004\031\215\001" +
    "\002\000\032\007\011\010\023\011\015\012\004\013\022" +
    "\014\013\015\014\034\017\037\005\040\027\042\020\043" +
    "\033\001\002\000\034\007\011\010\023\011\015\012\004" +
    "\013\022\014\013\015\014\034\017\037\005\040\027\042" +
    "\020\043\033\045\217\001\002\000\010\034\133\035\123" +
    "\036\150\001\002\000\004\033\221\001\002\000\004\032" +
    "\222\001\002\000\012\002\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\001\002\000\004\027\062\001\002\000\004\031\225\001" +
    "\002\000\032\007\011\010\023\011\015\012\004\013\022" +
    "\014\013\015\014\034\017\037\005\040\027\042\020\043" +
    "\033\001\002\000\034\007\011\010\023\011\015\012\004" +
    "\013\022\014\013\015\014\034\017\037\005\040\027\042" +
    "\020\043\033\045\227\001\002\000\010\034\133\035\123" +
    "\036\150\001\002\000\004\033\231\001\002\000\004\032" +
    "\232\001\002\000\012\002\uffda\046\uffda\047\uffda\050\uffda" +
    "\001\002\000\004\023\234\001\002\000\012\005\111\034" +
    "\242\035\240\036\241\001\002\000\004\033\uffc9\001\002" +
    "\000\004\033\uffca\001\002\000\012\017\250\020\246\021" +
    "\251\022\245\001\002\000\014\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\033\uffcd\001\002\000\014\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\033\uffcc\001\002\000\014\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\033\uffcb\001\002\000\004\033\244\001" +
    "\002\000\040\002\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\032\uffce\034\uffce\037\uffce\040" +
    "\uffce\042\uffce\043\uffce\045\uffce\001\002\000\010\034\uffc4" +
    "\035\uffc4\036\uffc4\001\002\000\010\034\uffc6\035\uffc6\036" +
    "\uffc6\001\002\000\010\034\133\035\123\036\150\001\002" +
    "\000\010\034\uffc7\035\uffc7\036\uffc7\001\002\000\010\034" +
    "\uffc5\035\uffc5\036\uffc5\001\002\000\004\033\uffc8\001\002" +
    "\000\012\030\256\034\133\035\123\036\150\001\002\000" +
    "\012\030\261\034\133\035\123\036\150\001\002\000\012" +
    "\030\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\004\033" +
    "\257\001\002\000\040\002\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\032\uffde\034\uffde\037" +
    "\uffde\040\uffde\042\uffde\043\uffde\045\uffde\001\002\000\012" +
    "\030\uffe1\034\uffe1\035\uffe1\036\uffe1\001\002\000\004\033" +
    "\262\001\002\000\040\002\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\032\uffdf\034\uffdf\037" +
    "\uffdf\040\uffdf\042\uffdf\043\uffdf\045\uffdf\001\002\000\004" +
    "\033\264\001\002\000\042\002\uff96\007\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\030\uff96\032\uff96" +
    "\034\uff96\037\uff96\040\uff96\042\uff96\043\uff96\045\uff96\001" +
    "\002\000\006\034\267\035\266\001\002\000\010\030\uffc1" +
    "\034\uffc1\035\uffc1\001\002\000\010\030\uffc2\034\uffc2\035" +
    "\uffc2\001\002\000\006\034\267\035\266\001\002\000\004" +
    "\030\272\001\002\000\004\031\273\001\002\000\032\007" +
    "\011\010\023\011\015\012\004\013\022\014\013\015\014" +
    "\034\017\037\005\040\027\042\020\043\033\001\002\000" +
    "\034\007\011\010\023\011\015\012\004\013\022\014\013" +
    "\015\014\032\275\034\017\037\005\040\027\042\020\043" +
    "\033\001\002\000\040\002\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\032\uffc3\034\uffc3\037" +
    "\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\001\002\000\010" +
    "\034\133\035\123\036\150\001\002\000\004\030\303\001" +
    "\002\000\004\024\301\001\002\000\010\034\133\035\123" +
    "\036\150\001\002\000\004\030\uffb8\001\002\000\004\031" +
    "\304\001\002\000\032\007\011\010\023\011\015\012\004" +
    "\013\022\014\013\015\014\034\017\037\005\040\027\042" +
    "\020\043\033\001\002\000\034\007\011\010\023\011\015" +
    "\012\004\013\022\014\013\015\014\032\306\034\017\037" +
    "\005\040\027\042\020\043\033\001\002\000\040\002\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\032\uffcf\034\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\001\002\000\004\033\310\001\002\000\042\002" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\030\uff99\032\uff99\034\uff99\037\uff99\040\uff99\042" +
    "\uff99\043\uff99\045\uff99\001\002\000\004\034\312\001\002" +
    "\000\004\030\313\001\002\000\004\033\314\001\002\000" +
    "\040\002\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\032\uff9a\034\uff9a\037\uff9a\040\uff9a\042" +
    "\uff9a\043\uff9a\045\uff9a\001\002\000\010\034\133\035\123" +
    "\036\150\001\002\000\004\030\317\001\002\000\004\031" +
    "\320\001\002\000\032\007\011\010\023\011\015\012\004" +
    "\013\022\014\013\015\014\034\017\037\005\040\027\042" +
    "\020\043\033\001\002\000\034\007\011\010\023\011\015" +
    "\012\004\013\022\014\013\015\014\032\322\034\017\037" +
    "\005\040\027\042\020\043\033\001\002\000\040\002\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\032\uffb9\034\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9" +
    "\045\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\042\002\007\004\006\005\027\010\030\012" +
    "\023\013\005\015\011\021\025\025\034\026\036\032\040" +
    "\035\015\036\024\037\037\040\033\041\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\046\004\045\005\053\010\052\012\050\013\044\021\051" +
    "\025\055\026\056\041\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\007" +
    "\004\006\005\027\010\030\012\023\013\005\015\164\021" +
    "\025\025\034\026\036\041\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\073\035\075" +
    "\036\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\007\004\006\005\027\010\030\012" +
    "\023\013\005\015\043\021\025\025\034\026\036\041\031" +
    "\001\001\000\026\002\046\004\045\005\053\010\052\012" +
    "\050\013\044\021\051\025\055\026\056\041\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\062" +
    "\001\001\000\006\002\066\034\067\001\001\000\002\001" +
    "\001\000\030\002\007\004\006\005\027\010\030\012\023" +
    "\013\005\015\064\021\025\025\034\026\036\041\031\001" +
    "\001\000\026\002\046\004\045\005\053\010\052\012\050" +
    "\013\044\021\051\025\055\026\056\041\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\007\004\006\005\027\010\030" +
    "\012\023\013\005\015\076\021\025\025\034\026\036\041" +
    "\031\001\001\000\002\001\001\000\026\002\046\004\045" +
    "\005\053\010\052\012\050\013\044\021\051\025\055\026" +
    "\056\041\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\105\031\104\001\001\000" +
    "\006\007\111\030\113\001\001\000\004\027\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\142\016\146\017\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\007\004\006\005\027\010\030\012\023\013\005" +
    "\015\116\021\025\025\034\026\036\041\031\001\001\000" +
    "\026\002\046\004\045\005\053\010\052\012\050\013\044" +
    "\021\051\025\055\026\056\041\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\142\016" +
    "\146\017\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\142\016\146\017\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\160\007\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\046\004\045\005\053" +
    "\010\052\012\050\013\044\021\051\025\055\026\056\041" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\142\016\146\017\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\007\004\006\005\027\010\030\012\023\013\005\015" +
    "\175\021\025\025\034\026\036\041\031\001\001\000\026" +
    "\002\046\004\045\005\053\010\052\012\050\013\044\021" +
    "\051\025\055\026\056\041\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\203\001\001\000\002\001\001\000\030\002\007" +
    "\004\006\005\027\010\030\012\023\013\005\015\205\021" +
    "\025\025\034\026\036\041\031\001\001\000\026\002\046" +
    "\004\045\005\053\010\052\012\050\013\044\021\051\025" +
    "\055\026\056\041\054\001\001\000\004\003\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\213\001\001\000\002\001\001\000\030\002\007" +
    "\004\006\005\027\010\030\012\023\013\005\015\215\021" +
    "\025\025\034\026\036\041\031\001\001\000\026\002\046" +
    "\004\045\005\053\010\052\012\050\013\044\021\051\025" +
    "\055\026\056\041\054\001\001\000\004\003\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\223\001\001\000\002\001\001\000\030\002\007" +
    "\004\006\005\027\010\030\012\023\013\005\015\225\021" +
    "\025\025\034\026\036\041\031\001\001\000\026\002\046" +
    "\004\045\005\053\010\052\012\050\013\044\021\051\025" +
    "\055\026\056\041\054\001\001\000\004\003\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\236\007\235\022\242\023\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\254\043\253\001\001\000\004\003\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\007\004\006\005" +
    "\027\010\030\012\023\013\005\015\273\021\025\025\034" +
    "\026\036\041\031\001\001\000\026\002\046\004\045\005" +
    "\053\010\052\012\050\013\044\021\051\025\055\026\056" +
    "\041\054\001\001\000\002\001\001\000\006\003\277\011" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\007\004\006\005\027\010\030\012\023\013\005" +
    "\015\304\021\025\025\034\026\036\041\031\001\001\000" +
    "\026\002\046\004\045\005\053\010\052\012\050\013\044" +
    "\021\051\025\055\026\056\041\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\277\011\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\007\004\006\005\027\010\030\012" +
    "\023\013\005\015\320\021\025\025\034\026\036\041\031" +
    "\001\001\000\026\002\046\004\045\005\053\010\052\012" +
    "\050\013\044\021\051\025\055\026\056\041\054\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // BLOQUE_CODIGO ::= FUNCIONES_PROCESOS PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= BLOQUE_CODIGO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_CODIGO ::= FUNCIONES_PROCESOS PRINCIPAL INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_CODIGO ::= PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_CODIGO ::= FUNCIONES_PROCESOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_CODIGO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_CODIGO ::= PRINCIPAL INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES_PROCESOS ::= FUNCIONES_PROCESOS FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROCESOS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES_PROCESOS ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROCESOS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES_PROCESOS ::= FUNCIONES_PROCESOS PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROCESOS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES_PROCESOS ::= PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROCESOS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PRINCIPAL ::= Principal Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= INSTRUCCIONES SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= INSTRUCCIONES SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= INSTRUCCIONES SICLO_PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= SICLO_PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= INSTRUCCIONES ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES ::= INSTRUCCIONES LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONES ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONES ::= INSTRUCCIONES PASAR_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONES ::= PASAR_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCIONES ::= INSTRUCCIONES SIGLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCIONES ::= SIGLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCIONES ::= INSTRUCCIONES SIGLO_CUANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCIONES ::= SIGLO_CUANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCIONES ::= INSTRUCCIONES INVOCACION_FP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCIONES ::= INVOCACION_FP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA SENTENCIA_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INVOCACION_FP ::= Identificador Parentesis_a SENTENCIA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVOCACION_FP",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INVOCACION_FP ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVOCACION_FP",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PROCEDIMIENTO ::= Procedimiento Identificador PARAMETROS Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= Funcion Entero Identificador PARAMETROS Llave_a INSTRUCCIONES Devolver SENTENCIA_CADENA P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= Funcion Cadena Identificador PARAMETROS Llave_a INSTRUCCIONES Devolver SENTENCIA_CADENA P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= Funcion Flotante Identificador PARAMETROS Llave_a INSTRUCCIONES Devolver SENTENCIA_CADENA P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS ::= Parentesis_a DECLARACION_PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROS ::= Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_PARAMETROS ::= DECLARACION_PARAMETROS DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_PARAMETROS ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIGLO_CUANDO ::= Cuando Parentesis_a Identificador Parentesis_c Llave_a INSTRUCCIONES_CASO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIGLO_CUANDO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCIONES_CASO ::= INSTRUCCIONES_CASO CASO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CASO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCIONES_CASO ::= CASO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CASO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASO ::= Caso SENTENCIA_CASO Asignacion Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_CASO ::= Numero_entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_CASO ::= IMPRIMIR_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIGLO_MIENTRAS ::= Mientras Parentesis_a CONDICION Parentesis_c Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIGLO_MIENTRAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PASAR_PARAMETRO ::= Numeral Identificador Asignacion TIPO_VARIABLE P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PASAR_PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VARIABLE ::= Numero_entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_VARIABLE ::= Numero_flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_VARIABLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_VARIABLE ::= IMPRIMIR_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_VARIABLE ::= OPERECION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERECION_BASICA ::= SENTENCIA_CADENA SINGO_OPERECION SENTENCIA_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERECION_BASICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SINGO_OPERECION ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINGO_OPERECION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SINGO_OPERECION ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINGO_OPERECION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SINGO_OPERECION ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINGO_OPERECION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SINGO_OPERECION ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINGO_OPERECION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SICLO_PARA ::= Para Parentesis_a VARIABLE VARIABLE Parentesis_c Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SICLO_PARA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLE ::= Numero_entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INSTRUCCION ::= INSTRUCCION ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUCCION ::= ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUCCION ::= INSTRUCCION LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCCION ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCCION ::= INSTRUCCION PASAR_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCION ::= PASAR_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SINO ::= Sino Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SI ::= Si Parentesis_a CONDICION Parentesis_c Llave_a INSTRUCCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= SENTENCIA_CADENA Op_relacional SENTENCIA_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESCRIBIR ::= Escribir Parentesis_a SENTENCIA_ESCRIBIR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_ESCRIBIR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ESCRIBIR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_ESCRIBIR ::= IMPRIMIR_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ESCRIBIR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMPRIMIR_TEXTO ::= Comillas TEXTO_REPETIDO Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_TEXTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TEXTO_REPETIDO ::= SENTENCIA_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_REPETIDO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TEXTO_REPETIDO ::= SENTENCIA_CADENA TEXTO_REPETIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_REPETIDO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TEXTO_REPETIDO ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_REPETIDO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TEXTO_REPETIDO ::= TEXTO TEXTO_REPETIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_REPETIDO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TEXTO ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TEXTO ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TEXTO ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TEXTO ::= Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TEXTO ::= Sino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TEXTO ::= Mientras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TEXTO ::= Para 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TEXTO ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TEXTO ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TEXTO ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TEXTO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TEXTO ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TEXTO ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TEXTO ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TEXTO ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TEXTO ::= Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TEXTO ::= Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TEXTO ::= Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TEXTO ::= Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TEXTO ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TEXTO ::= ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LEER ::= Leer Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= Entero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= Cadena Identificador Asignacion Comillas TEXTO_REPETIDO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= Flotante Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CADENA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_CADENA ::= Numero_entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CADENA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_CADENA ::= Numero_flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CADENA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
